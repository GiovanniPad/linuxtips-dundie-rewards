[project]
name = "giovannipad-dundie"
description = "Reward point system for Dunder Mifflin"
authors = [
  {name = "Giovanni Padilha", email = "giovannipdlh@gmail.com"}
]
requires-python = ">=3.13"
license = {text = "MIT"}
dynamic = ["version", "readme"]
dependencies = [
    "aiosmtpd>=1.4.6",
    "alembic>=1.14.1",
    "click>=8.1.8",
    "httpx>=0.28.1",
    "keyring>=25.6.0",
    "pydantic>=2.10.6",
    "rich>=13.9.4",
    "rich-click>=1.8.6",
    "setuptools>=75.8.2",
    "sqlalchemy>=2.0.38",
    "sqlmodel>=0.0.23",
]

[project.urls]
Homepage = 'https://dundermifflin.com'
Source = 'https://github.com/GiovanniPad/linuxtips-dundie-rewards'

[project.scripts]
dundie = "dundie:__main__.main"

[project.optional-dependencies]
test = [
    "coverage>=7.6.12",
    "pytest>=8.3.5",
    "pytest-cov>=6.0.0",
    "pytest-forked>=1.6.0",
    "setuptools>=75.8.2",
    "types-setuptools>=75.8.2.20250301"
]

[build-system]
requires = ["setuptools>=45", "setuptools_scm[toml]>=6.2"]
build-backend = "setuptools.build_meta"

[tool.setuptools]
packages = ["dundie"]

[tool.setuptools.dynamic]
readme = {file = ["README.md", "docs/how_to_install.md"]}

[tool.setuptools_scm]
write_to = "dundie/VERSION.txt"

[tool.pytest.ini_options]
minversion = "6.0"
addopts = "-ra -q -vv"
testpaths = [
    "tests",
    "integration",
]
markers = [
  "unit: Mark unit tests",
  "integration: Mark integration tests",
  "high: High Priority",
  "medium: Medium Priority",
  "low: Low Priority",
]

[dependency-groups]
dev = [
    "ipdb>=0.13.13",
    "pytest-watch>=4.2.0",
    "taskipy>=1.14.1",
    "types-setuptools>=75.8.2.20250301",
]

[tool.ruff]
line-length = 79
indent-width = 4
target-version = "py310"

[tool.taskipy.tasks]
lint = "uvx ruff check dundie integration tests"
fmt = "uvx ruff format dundie integration tests"
test = """
    uv run --extra test pytest -s --cov=dundie --forked
    uv run --extra test coverage xml
    uv run --extra test coverage html
"""
docs = "uvx mkdocs build --clean"
docs-serve = "uvx mkdocs serve"
clean = """
    find ./ -name '*.pyc' -exec rm -f {} \\;
    find ./ -name '.ruff_cache' -exec rm -f {} \\;
    find ./ -name '__pycache__' -exec rm -rf {} \\;
    find ./ -name 'Thumbs.db' -exec rm -f {} \\;
    find ./ -name '*~' -exec rm -f {} \\;
    rm -rf  {.cache,.pytest_cache,.mypy_cache,htmlcov,docs/_build,.coverage,coverage.xml};
    uvx ruff clean
"""
resetdb = """
    read -p "Are you sure you want to reset the project db [y/N]" -n 1-r
    echo    # (optional) move to a new line
    if [[ $REPLY =~ ^[Yy]$ ]]
    then
        rm -rf assets/database.db
        uv run python -m aiosmtpd -n &
        uv run dundie load assets/people.csv
        uv run alembic stamp head
        pkill -fc aiosmtpd
    fi
"""

[tool.coverage.run]
omit = [
        "__main__.py",
        "__init__.py"
    ]
